This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-20T11:43:30.291Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

- Line numbers have been added to the beginning of each line.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/workflows/cron-job.yml
.gitignore
astro.config.mjs
package.json
public/favicon.svg
public/robots.txt
README.md
src/assets/astro.svg
src/assets/background.svg
src/components/Head.astro
src/components/PageSection.astro
src/components/post/post-header.astro
src/components/ui/back-button.vue
src/components/ui/blog-card.vue
src/components/ui/experience-card.vue
src/components/ui/project-card.vue
src/components/ui/section-header.vue
src/components/ui/skills-card.vue
src/content.config.ts
src/data/blog/mastering-api-testing-with-mocking-in-typescript.mdx
src/data/blog/mocking-local-storage-vitest.mdx
src/data/blog/scheduled-cron-jobs-github.mdx
src/data/blog/testing-vue-composables-lifecycle.mdx
src/data/projects/blak_ui.json
src/data/projects/blog.json
src/data/projects/whispr.json
src/data/work/1.abn.json
src/data/work/2.share_value.json
src/data/work/3.firstview.json
src/data/work/4.sportpro.json
src/data/work/5.d2d.json
src/layouts/Layout.astro
src/pages/index.astro
src/pages/writing/[id].astro
src/pages/writing/index.astro
src/styles/global.css
src/utils/sortByDate.js
src/utils/webpConverter.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/workflows/cron-job.yml">
 1: name: Weekly WebP Converter
 2: on:
 3:   schedule:
 4:     # Runs at 00:00 every Sunday
 5:     # The syntax is: minute hour day(month) month day(week)
 6:     - cron: '0 0 * * 0'
 7:   # Optional: Allow manual triggering of the workflow
 8:   workflow_dispatch:
 9: jobs:
10:   run-webp-converter:
11:     runs-on: ubuntu-latest
12:     steps:
13:       - name: Checkout code
14:         uses: actions/checkout@v3
15:         with:
16:           repository: britzdylan/portfolio.dylanbritz.dev
17:           token: ${{ secrets.SECRET_PAT }}
18:       - name: Setup Node.js
19:         uses: actions/setup-node@v3
20:         with:
21:           node-version: '18'
22:       - name: Install dependencies
23:         run: |
24:           # Add any npm dependencies your script might need
25:           # For example: npm install sharp
26:           npm ci || npm install
27:       - name: Run WebP converter script
28:         run: |
29:           # Run the script
30:           node ./src/utils/webpConverter.js
31:       - name: Check for changes and commit if needed
32:         run: |
33:           # Optional: Commit any changes the script might have made
34:           if [[ -n $(git status --porcelain) ]]; then
35:             git config --global user.name 'GitHub Actions Bot'
36:             git config --global user.email 'actions@github.com'
37:             git add .
38:             git commit -m "Weekly WebP conversion [automated]"
39:             git push
40:           else
41:             echo "No changes to commit"
42:           fi
</file>

<file path=".gitignore">
 1: # build output
 2: dist/
 3: 
 4: # generated types
 5: .astro/
 6: 
 7: # dependencies
 8: node_modules/
 9: 
10: # logs
11: npm-debug.log*
12: yarn-debug.log*
13: yarn-error.log*
14: pnpm-debug.log*
15: 
16: # environment variables
17: .env
18: .env.production
19: 
20: # macOS-specific files
21: .DS_Store
22: 
23: # jetbrains setting folder
24: .idea/
25: tmp/
</file>

<file path="astro.config.mjs">
 1: // @ts-check
 2: import { defineConfig } from 'astro/config';
 3: import tailwindcss from '@tailwindcss/vite';
 4: import vue from '@astrojs/vue';
 5: import mdx from '@astrojs/mdx';
 6: 
 7: import sitemap from '@astrojs/sitemap';
 8: 
 9: // https://astro.build/config
10: export default defineConfig({
11:   site: 'https://dylanbritz.dev',
12:   trailingSlash: 'ignore',
13:   integrations: [
14:     vue(),
15:     mdx(),
16:     sitemap({
17:       i18n: {
18:         defaultLocale: 'en', // All urls that don't contain `es` or `fr` after `https://stargazers.club/` will be treated as default locale, i.e. `en`
19:         locales: {
20:           en: 'en-US', // The `defaultLocale` value must present in `locales` keys
21:           nl: 'nl-NL',
22:         },
23:       },
24:     }),
25:   ],
26:   vite: {
27:     plugins: [tailwindcss()],
28:   },
29: });
</file>

<file path="package.json">
 1: {
 2:   "name": "",
 3:   "type": "module",
 4:   "version": "0.0.1",
 5:   "scripts": {
 6:     "dev": "astro dev",
 7:     "build": "astro build",
 8:     "preview": "astro preview",
 9:     "astro": "astro",
10:     "repomix": "repomix --output llm.xml --output-show-line-numbers --style xml --remove-empty-lines"
11:   },
12:   "dependencies": {
13:     "@astrojs/mdx": "^4.2.3",
14:     "@astrojs/sitemap": "^3.3.0",
15:     "@astrojs/vue": "^5.0.9",
16:     "@tailwindcss/vite": "^4.1.3",
17:     "astro": "^5.6.1",
18:     "astro-seo-meta": "^5.1.0",
19:     "imagemin": "^9.0.1",
20:     "imagemin-webp": "^8.0.0",
21:     "motion-v": "^1.0.0-beta.2",
22:     "tailwindcss": "^4.1.3",
23:     "vue": "^3.5.13"
24:   },
25:   "devDependencies": {
26:     "@faker-js/faker": "^9.7.0",
27:     "@tailwindcss/typography": "^0.5.16"
28:   }
29: }
</file>

<file path="public/favicon.svg">
1: <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 128 128">
2:     <path d="M50.4 78.5a75.1 75.1 0 0 0-28.5 6.9l24.2-65.7c.7-2 1.9-3.2 3.4-3.2h29c1.5 0 2.7 1.2 3.4 3.2l24.2 65.7s-11.6-7-28.5-7L67 45.5c-.4-1.7-1.6-2.8-2.9-2.8-1.3 0-2.5 1.1-2.9 2.7L50.4 78.5Zm-1.1 28.2Zm-4.2-20.2c-2 6.6-.6 15.8 4.2 20.2a17.5 17.5 0 0 1 .2-.7 5.5 5.5 0 0 1 5.7-4.5c2.8.1 4.3 1.5 4.7 4.7.2 1.1.2 2.3.2 3.5v.4c0 2.7.7 5.2 2.2 7.4a13 13 0 0 0 5.7 4.9v-.3l-.2-.3c-1.8-5.6-.5-9.5 4.4-12.8l1.5-1a73 73 0 0 0 3.2-2.2 16 16 0 0 0 6.8-11.4c.3-2 .1-4-.6-6l-.8.6-1.6 1a37 37 0 0 1-22.4 2.7c-5-.7-9.7-2-13.2-6.2Z" />
3:     <style>
4:         path { fill: #000; }
5:         @media (prefers-color-scheme: dark) {
6:             path { fill: #FFF; }
7:         }
8:     </style>
9: </svg>
</file>

<file path="public/robots.txt">
1: User-agent: *
2: Allow: /
3: 
4: Sitemap: https://dylanbritz.dev/sitemap-index.xml
</file>

<file path="README.md">
 1: # Dylan Britz Personal Site
 2: 
 3: A modern, open source personal website built with [Astro](https://astro.build), [Vue 3](https://vuejs.org), and [Tailwind CSS](https://tailwindcss.com).
 4: 
 5: ## Features
 6: 
 7: - **Modern Frontend:** Built with Astro for blazing fast performance and a clean development experience.
 8: - **Vue Components:** Leverages Vue 3 for interactive UI components.
 9: - **Tailwind CSS:** Custom styled with Tailwind CSS for a responsive design.
10: - **Motion Animations:** Uses `motion-v` for smooth, engaging animations.
11: - **Content Driven:** Powered by MDX and JSON content to dynamically load blog posts, projects, and work experience.
12: - **SEO Friendly:** Integrated SEO meta tags using `astro-seo-meta`.
13: - **Open Source:** Fully open for contributions and customization.
14: 
15: ## Installation
16: 
17: 1. **Clone the repository:**
18: 
19:    ```bash
20:    git clone https://github.com/your-username/portfolio.dylanbritz.dev.git
21:    cd portfolio.dylanbritz.dev
22:    ```
23: 
24: 2. **Install dependencies:**
25: 
26:    ```bash
27:    npm install
28:    ```
29: 
30: ## Development
31: 
32: Start the development server with:
33: 
34: ```bash
35: npm run dev
36: ```
37: 
38: Then open your browser and navigate to [http://localhost:4321](http://localhost:4321).
39: 
40: ## Build & Preview
41: 
42: To build the site for production:
43: 
44: ```bash
45: npm run build
46: ```
47: 
48: Preview the production build locally:
49: 
50: ```bash
51: npm run preview
52: ```
53: 
54: ## License
55: 
56: This project is open source under the [MIT License](LICENSE).
57: 
58: ## Acknowledgements
59: 
60: - Built with [Astro](https://astro.build)
61: 
62: Happy coding!
</file>

<file path="src/assets/astro.svg">
1: <svg xmlns="http://www.w3.org/2000/svg" fill="none" width="115" height="48"><path fill="#17191E" d="M7.77 36.35C6.4 35.11 6 32.51 6.57 30.62c.99 1.2 2.35 1.57 3.75 1.78 2.18.33 4.31.2 6.33-.78.23-.12.44-.27.7-.42.18.55.23 1.1.17 1.67a4.56 4.56 0 0 1-1.94 3.23c-.43.32-.9.61-1.34.91-1.38.94-1.76 2.03-1.24 3.62l.05.17a3.63 3.63 0 0 1-1.6-1.38 3.87 3.87 0 0 1-.63-2.1c0-.37 0-.74-.05-1.1-.13-.9-.55-1.3-1.33-1.32a1.56 1.56 0 0 0-1.63 1.26c0 .06-.03.12-.05.2Z"/><path fill="url(#a)" d="M7.77 36.35C6.4 35.11 6 32.51 6.57 30.62c.99 1.2 2.35 1.57 3.75 1.78 2.18.33 4.31.2 6.33-.78.23-.12.44-.27.7-.42.18.55.23 1.1.17 1.67a4.56 4.56 0 0 1-1.94 3.23c-.43.32-.9.61-1.34.91-1.38.94-1.76 2.03-1.24 3.62l.05.17a3.63 3.63 0 0 1-1.6-1.38 3.87 3.87 0 0 1-.63-2.1c0-.37 0-.74-.05-1.1-.13-.9-.55-1.3-1.33-1.32a1.56 1.56 0 0 0-1.63 1.26c0 .06-.03.12-.05.2Z"/><path fill="#17191E" d="M.02 30.31s4.02-1.95 8.05-1.95l3.04-9.4c.11-.45.44-.76.82-.76.37 0 .7.31.82.76l3.04 9.4c4.77 0 8.05 1.95 8.05 1.95L17 11.71c-.2-.56-.53-.91-.98-.91H7.83c-.44 0-.76.35-.97.9L.02 30.31Zm42.37-5.97c0 1.64-2.05 2.62-4.88 2.62-1.85 0-2.5-.45-2.5-1.41 0-1 .8-1.49 2.65-1.49 1.67 0 3.09.03 4.73.23v.05Zm.03-2.04a21.37 21.37 0 0 0-4.37-.36c-5.32 0-7.82 1.25-7.82 4.18 0 3.04 1.71 4.2 5.68 4.2 3.35 0 5.63-.84 6.46-2.92h.14c-.03.5-.05 1-.05 1.4 0 1.07.18 1.16 1.06 1.16h4.15a16.9 16.9 0 0 1-.36-4c0-1.67.06-2.93.06-4.62 0-3.45-2.07-5.64-8.56-5.64-2.8 0-5.9.48-8.26 1.19.22.93.54 2.83.7 4.06 2.04-.96 4.95-1.37 7.2-1.37 3.11 0 3.97.71 3.97 2.15v.57Zm11.37 3c-.56.07-1.33.07-2.12.07-.83 0-1.6-.03-2.12-.1l-.02.58c0 2.85 1.87 4.52 8.45 4.52 6.2 0 8.2-1.64 8.2-4.55 0-2.74-1.33-4.09-7.2-4.39-4.58-.2-4.99-.7-4.99-1.28 0-.66.59-1 3.65-1 3.18 0 4.03.43 4.03 1.35v.2a46.13 46.13 0 0 1 4.24.03l.02-.55c0-3.36-2.8-4.46-8.2-4.46-6.08 0-8.13 1.49-8.13 4.39 0 2.6 1.64 4.23 7.48 4.48 4.3.14 4.77.62 4.77 1.28 0 .7-.7 1.03-3.71 1.03-3.47 0-4.35-.48-4.35-1.47v-.13Zm19.82-12.05a17.5 17.5 0 0 1-6.24 3.48c.03.84.03 2.4.03 3.24l1.5.02c-.02 1.63-.04 3.6-.04 4.9 0 3.04 1.6 5.32 6.58 5.32 2.1 0 3.5-.23 5.23-.6a43.77 43.77 0 0 1-.46-4.13c-1.03.34-2.34.53-3.78.53-2 0-2.82-.55-2.82-2.13 0-1.37 0-2.65.03-3.84 2.57.02 5.13.07 6.64.11-.02-1.18.03-2.9.1-4.04-2.2.04-4.65.07-6.68.07l.07-2.93h-.16Zm13.46 6.04a767.33 767.33 0 0 1 .07-3.18H82.6c.07 1.96.07 3.98.07 6.92 0 2.95-.03 4.99-.07 6.93h5.18c-.09-1.37-.11-3.68-.11-5.65 0-3.1 1.26-4 4.12-4 1.33 0 2.28.16 3.1.46.03-1.16.26-3.43.4-4.43-.86-.25-1.81-.41-2.96-.41-2.46-.03-4.26.98-5.1 3.38l-.17-.02Zm22.55 3.65c0 2.5-1.8 3.66-4.64 3.66-2.81 0-4.61-1.1-4.61-3.66s1.82-3.52 4.61-3.52c2.82 0 4.64 1.03 4.64 3.52Zm4.71-.11c0-4.96-3.87-7.18-9.35-7.18-5.5 0-9.23 2.22-9.23 7.18 0 4.94 3.49 7.59 9.21 7.59 5.77 0 9.37-2.65 9.37-7.6Z"/><defs><linearGradient id="a" x1="6.33" x2="19.43" y1="40.8" y2="34.6" gradientUnits="userSpaceOnUse"><stop stop-color="#D83333"/><stop offset="1" stop-color="#F041FF"/></linearGradient></defs></svg>
</file>

<file path="src/assets/background.svg">
1: <svg xmlns="http://www.w3.org/2000/svg" width="1440" height="1024" fill="none"><path fill="url(#a)" fill-rule="evenodd" d="M-217.58 475.75c91.82-72.02 225.52-29.38 341.2-44.74C240 415.56 372.33 315.14 466.77 384.9c102.9 76.02 44.74 246.76 90.31 366.31 29.83 78.24 90.48 136.14 129.48 210.23 57.92 109.99 169.67 208.23 155.9 331.77-13.52 121.26-103.42 264.33-224.23 281.37-141.96 20.03-232.72-220.96-374.06-196.99-151.7 25.73-172.68 330.24-325.85 315.72-128.6-12.2-110.9-230.73-128.15-358.76-12.16-90.14 65.87-176.25 44.1-264.57-26.42-107.2-167.12-163.46-176.72-273.45-10.15-116.29 33.01-248.75 124.87-320.79Z" clip-rule="evenodd" style="opacity:.154"/><path fill="url(#b)" fill-rule="evenodd" d="M1103.43 115.43c146.42-19.45 275.33-155.84 413.5-103.59 188.09 71.13 409 212.64 407.06 413.88-1.94 201.25-259.28 278.6-414.96 405.96-130 106.35-240.24 294.39-405.6 265.3-163.7-28.8-161.93-274.12-284.34-386.66-134.95-124.06-436-101.46-445.82-284.6-9.68-180.38 247.41-246.3 413.54-316.9 101.01-42.93 207.83 21.06 316.62 6.61Z" clip-rule="evenodd" style="opacity:.154"/><defs><linearGradient id="b" x1="373" x2="1995.44" y1="1100" y2="118.03" gradientUnits="userSpaceOnUse"><stop stop-color="#D83333"/><stop offset="1" stop-color="#F041FF"/></linearGradient><linearGradient id="a" x1="107.37" x2="1130.66" y1="1993.35" y2="1026.31" gradientUnits="userSpaceOnUse"><stop stop-color="#3245FF"/><stop offset="1" stop-color="#BC52EE"/></linearGradient></defs></svg>
</file>

<file path="src/components/Head.astro">
 1: ---
 2: import { Seo } from 'astro-seo-meta';
 3: interface Props {
 4:   title?: string;
 5:   description?: string;
 6:   keywords?: string[];
 7:   icon?: string;
 8:   themeColor?: string;
 9:   colorScheme?: string;
10:   robots?: string;
11: }
12: const {
13:   title = 'Dylan Britz',
14:   description = 'Full stack developer with 8+ years of experience specializing in modern web applications and e-commerce solutions.',
15:   robots = 'index, follow',
16: } = Astro.props;
17: 
18: const canonicalURL = new URL(Astro.url.pathname, Astro.site);
19: ---
20: 
21: <head>
22:   <meta charset='UTF-8' />
23:   <meta name='viewport' content='width=device-width, initial-scale=1.0' />
24:   <meta http-equiv='X-UA-Compatible' content='IE=edge' />
25:   <meta name='author' content='Dylan Britz' />
26:   <link rel='canonical' href={canonicalURL} />
27:   <link rel='sitemap' href='/sitemap-index.xml' />
28: 
29:   <!-- Favicon -->
30:   <link rel='icon' type='image/png' sizes='32x32' href='/favicon-32x32.png' />
31:   <link rel='icon' type='image/png' sizes='16x16' href='/favicon-16x16.png' />
32:   <link rel='shortcut icon' href='/favicon.ico' />
33: 
34:   <!-- Apple Touch Icons -->
35:   <link rel='apple-touch-icon' sizes='180x180' href='/apple-touch-icon.png' />
36: 
37:   <!-- Android/Chrome Icons -->
38:   <link
39:     rel='icon'
40:     type='image/png'
41:     sizes='192x192'
42:     href='/android-chrome-192x192.png'
43:   />
44:   <link
45:     rel='icon'
46:     type='image/png'
47:     sizes='512x512'
48:     href='/android-chrome-512x512.png'
49:   />
50:   <script
51:     defer
52:     src='https://umami.dylanbritz.dev/script.js'
53:     data-website-id='a950e075-6d63-489c-a7c9-6a1a90852385'></script>
54:   <!-- Theme Color -->
55:   <meta name='theme-color' content='#000000' />
56:   <!-- Web analytics -->
57:   <slot>
58:     <Seo
59:       title={title}
60:       description={description}
61:       icon='/favicon.ico'
62:       themeColor='#000000'
63:       colorScheme='light'
64:       robots={robots}
65:       facebook={{
66:         image: '/facebook.png',
67:         url: 'https://dylanbritz.dev',
68:         type: 'website',
69:       }}
70:       twitter={{
71:         image: '/twitter.png',
72:         site: '@britzdm',
73:         card: 'summary',
74:       }}
75:     />
76:   </slot>
77:   <!-- <SomeOtherTags />
78: 
79: <Favicon /> -->
80: </head>
</file>

<file path="src/components/PageSection.astro">
 1: ---
 2: import SectionHeader from '../components/ui/section-header.vue';
 3: 
 4: interface Props {
 5:   title: string;
 6: }
 7: 
 8: const { title } = Astro.props;
 9: ---
10: 
11: <section
12:   class='container mx-auto px-4 md:px-0 py-14 md:py-24 flex flex-col md:flex-row gap-8 overflow-visible'>
13:   <slot name='content'>
14:     <div class='mt-1 w-full md:max-w-1/3'>
15:       <SectionHeader client:load title={title} />
16:     </div>
17:     <div class='w-full flex flex-col gap-4'>
18:       <slot />
19:     </div>
20:   </slot>
21: </section>
</file>

<file path="src/components/post/post-header.astro">
 1: ---
 2: const { title, description, author, date, imageId } = Astro.props;
 3: ---
 4: 
 5: <header
 6:   class='p-2 md:p-6 lg:p-20 bg-primary-200 flex items-center justify-center'>
 7:   <div class='max-w-4xl mx-auto flex flex-col gap-2 md:gap-6'>
 8:     <h1 class='h2'>{title}</h1>
 9:     <div class='flex flex-col gap-2 md:gap-6'>
10:       <p class='p text-primary-600'>
11:         {description}
12:       </p>
13:       <div class='flex items-center gap-2'>
14:         <picture>
15:           <source srcset='/opt/images/profile.webp' type='image/webp' />
16:           <source srcset='/opt/images/profile.jpeg' type='image/jpeg' />
17:           <img
18:             class='w-4 h-4 rounded-full'
19:             width='32px'
20:             height='32px'
21:             src='/opt/images/profile.jpeg'
22:             alt='Photo of Dylan Britz'
23:           />
24:         </picture>
25: 
26:         <p class='text-sm'>{author}</p>
27:         <span class='text-sm text-neutral-500'>•</span>
28:         <time class='text-sm text-neutral-500'>{date.toDateString()}</time>
29:       </div>
30: 
31:       <picture>
32:         <source srcset=`/opt/images/${imageId}.webp` type='image/webp' />
33:         <source srcset=`/opt/images/${imageId}.jpeg` type='image/jpeg' />
34:         <img
35:           class='w-full aspect-[720/360] object-cover rounded-lg shadow-lg'
36:           src=`/opt/images/${imageId}.jpeg`
37:           alt='Photo of Dylan Britz'
38:         />
39:       </picture>
40:     </div>
41:   </div>
42: </header>
</file>

<file path="src/components/ui/back-button.vue">
 1: <template>
 2:   <a
 3:     v-if="post.data"
 4:     :href="`/writing/${post.id}`"
 5:     :title="post.data.title"
 6:     :aria-label="post.data.title"
 7:     class="rounded-full text-neutral-800 flex items-center cursor-pointer gap-2 font-medium">
 8:     <svg
 9:       v-if="!rotate"
10:       xmlns="http://www.w3.org/2000/svg"
11:       fill="none"
12:       viewBox="0 0 24 24"
13:       stroke-width="1.5"
14:       stroke="currentColor"
15:       aria-hidden="true"
16:       class="size-5">
17:       <path
18:         stroke-linecap="round"
19:         stroke-linejoin="round"
20:         d="m11.25 9-3 3m0 0 3 3m-3-3h7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
21:     </svg>
22:     <div class="flex flex-col gap-1 w-max" :class="rotate ? 'ml-auto' : ''">
23:       {{ rotate ? 'Next' : 'Previous' }} Post
24:       <!-- <small class="text-xs">{{ post.data.title }}</small> -->
25:     </div>
26:     <svg
27:       v-if="rotate"
28:       xmlns="http://www.w3.org/2000/svg"
29:       fill="none"
30:       viewBox="0 0 24 24"
31:       stroke-width="1.5"
32:       stroke="currentColor"
33:       aria-hidden="true"
34:       class="size-5 rotate-180">
35:       <path
36:         stroke-linecap="round"
37:         stroke-linejoin="round"
38:         d="m11.25 9-3 3m0 0 3 3m-3-3h7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
39:     </svg>
40:   </a>
41: </template>
42: <script setup lang="ts">
43:   import { motion } from 'motion-v';
44:   type Props = {
45:     post: { data?: { title: string }; id: string };
46:     rotate: boolean;
47:   };
48:   defineProps<Props>();
49:   const go = () => {
50:     if (window) {
51:       window.history.back();
52:     }
53:   };
54: </script>
55: <style scoped></style>
56: b
</file>

<file path="src/components/ui/blog-card.vue">
 1: <template>
 2:   <motion.li
 3:     class="transition-all duration-100 ease-linear pb-6 border-b border-neutral-300 flex flex-col gap-2 cursor-pointer group hover:border-neutral-500"
 4:     :initial="{ opacity: 0, y: 20 }"
 5:     :whileInView="{ opacity: 1, y: 0 }"
 6:     :inViewOptions="{ once: true }"
 7:     :transition="{ duration: 0.1, delay: delay * 0.1, ease: 'easeIn' }">
 8:     <a
 9:       class="group-hover:translate-x-2 transform transition-all duration-100 ease-linear h3"
10:       :href="url"
11:       >{{ title }}</a
12:     >
13:     <div
14:       class="group-hover:translate-x-2 transform transition-all duration-100 ease-linear flex gap-2 p">
15:       <time class="text-neutral-500">
16:         {{ date.toLocaleDateString() }}
17:       </time>
18:       <span class="text-neutral-500"> • </span>
19:       <span class="text-neutral-500">{{ author }}</span>
20:     </div>
21:   </motion.li>
22: </template>
23: <script setup lang="ts">
24:   import { motion } from 'motion-v';
25:   import { defineProps } from 'vue';
26:   type Props = {
27:     title: string;
28:     date: Date;
29:     author: string;
30:     delay: number;
31:     url: string;
32:   };
33:   defineProps<Props>();
34: </script>
35: <style scoped></style>
</file>

<file path="src/components/ui/experience-card.vue">
 1: <template>
 2:   <motion.li
 3:     class="pb-6 border-b border-neutral-300 flex flex-col gap-1"
 4:     :initial="{ opacity: 0, y: 20 }"
 5:     :whileInView="{ opacity: 1, y: 0 }"
 6:     :inViewOptions="{ once: true }"
 7:     :transition="{ duration: 0.1, delay: delay * 0.1, ease: 'easeIn' }">
 8:     <h3 class="h2">
 9:       {{ title }}
10:     </h3>
11:     <div class="flex flex-col gap-2 text-neutral-600">
12:       <p class="text-sm">
13:         {{ company }}
14:       </p>
15:       <p>
16:         {{ date }}
17:       </p>
18:     </div>
19:   </motion.li>
20: </template>
21: <script setup lang="ts">
22:   import { motion } from 'motion-v';
23:   import { defineProps } from 'vue';
24:   type Props = {
25:     title: string;
26:     company: string;
27:     date: string;
28:     delay: number;
29:   };
30:   defineProps<Props>();
31: </script>
</file>

<file path="src/components/ui/project-card.vue">
 1: <template>
 2:   <motion.a
 3:     :initial="{ opacity: 0, y: 20 }"
 4:     :whileInView="{ opacity: 1, y: 0 }"
 5:     :inViewOptions="{ once: true }"
 6:     :transition="{ duration: 0.1, delay: offset * 0.1, ease: 'easeIn' }"
 7:     :href="link"
 8:     target="_blank"
 9:     rel="noopener"
10:     class="w-full flex items-start gap-2 py-2 group">
11:     <div class="flex flex-col items-start">
12:       <h3 class="flex gap-1 items-center h2">
13:         {{ title
14:         }}<svg
15:           xmlns="http://www.w3.org/2000/svg"
16:           fill="none"
17:           viewBox="0 0 24 24"
18:           stroke-width="1.5"
19:           stroke="currentColor"
20:           class="size-6 mt-1 hidden group-hover:block text-primary-500">
21:           <path
22:             stroke-linecap="round"
23:             stroke-linejoin="round"
24:             d="m4.5 19.5 15-15m0 0H8.25m11.25 0v11.25" />
25:         </svg>
26:       </h3>
27:       <p class="text-neutral-600">{{ description }}</p>
28:     </div>
29:   </motion.a>
30: </template>
31: <script setup lang="ts">
32:   import { motion } from 'motion-v';
33:   interface ProjectCardProps {
34:     title: string;
35:     description: string;
36:     link: string;
37:     offset: number;
38:   }
39:   defineProps<ProjectCardProps>();
40: </script>
</file>

<file path="src/components/ui/section-header.vue">
 1: <template>
 2:   <motion.div
 3:     :initial="{ width: 0 }"
 4:     :whileInView="{ width: '100%', height: 'auto' }"
 5:     :inViewOptions="{ once: true }"
 6:     :transition="{ duration: 1, delay: 0.2, ease: 'easeOut' }"
 7:     class="w-full border-t-2 border-neutral-800 sticky top-4 pt-1 overflow-hidden">
 8:     <h2 class="truncate h3">
 9:       {{ title }}
10:     </h2>
11:   </motion.div>
12: </template>
13: <script setup lang="ts">
14:   import { motion } from 'motion-v';
15:   import { defineProps } from 'vue';
16:   type Props = {
17:     title: string;
18:   };
19:   defineProps<Props>();
20: </script>
21: <style scoped></style>
</file>

<file path="src/components/ui/skills-card.vue">
 1: <template>
 2:   <motion.li
 3:     class="pb-6 border-b border-neutral-300 flex flex-col gap-1"
 4:     :initial="{ opacity: 0, y: 20 }"
 5:     :whileInView="{ opacity: 1, y: 0 }"
 6:     :inViewOptions="{ once: true }"
 7:     :transition="{ duration: 0.1, delay: delay * 0.1, ease: 'easeIn' }">
 8:     <h3 class="h2">
 9:       {{ title }}
10:     </h3>
11:   </motion.li>
12: </template>
13: <script setup lang="ts">
14:   import { motion } from 'motion-v';
15:   import { defineProps } from 'vue';
16:   type Props = {
17:     title: string;
18:     delay: number;
19:   };
20:   defineProps<Props>();
21: </script>
</file>

<file path="src/content.config.ts">
 1: // 1. Import utilities from `astro:content`
 2: import { defineCollection, z } from 'astro:content';
 3: // 2. Import loader(s)
 4: import { glob, file } from 'astro/loaders';
 5: // 3. Define your collection(s)
 6: const blog = defineCollection({
 7:   loader: glob({ pattern: '**/*.mdx', base: './src/data/blog' }),
 8:   schema: z.object({
 9:     title: z.string(),
10:     author: z.string(),
11:     date: z.date(),
12:     tags: z.array(z.string()).optional(),
13:     description: z.string().optional(),
14:     image: z.string().optional(),
15:   }),
16: });
17: const projects = defineCollection({
18:   loader: glob({ pattern: '**/*.json', base: './src/data/projects' }),
19:   schema: z.object({
20:     title: z.string(),
21:     description: z.string(),
22:     link: z.string(),
23:   }),
24: });
25: const work = defineCollection({
26:   loader: glob({ pattern: '**/*.json', base: './src/data/work' }),
27:   schema: z.object({
28:     title: z.string(),
29:     company: z.string(),
30:     date: z.string(),
31:   }),
32: });
33: // 4. Export a single `collections` object to register your collection(s)
34: export const collections = { blog, projects, work };
</file>

<file path="src/data/blog/mastering-api-testing-with-mocking-in-typescript.mdx">
  1: ---
  2: title: 'Mastering API Testing with Mocking in TypeScript: An Intro to Mock Service Worker'
  3: author: 'Dylan Brtiz'
  4: date: 2025-04-17
  5: tags: ['typescript', 'testing', 'api', 'msw', 'web-development']
  6: description: 'A comprehensive guide to using Mock Service Worker (MSW) for API testing in TypeScript projects.'
  7: ---
  8: 
  9: Hey fellow developers! 👋 If you're diving into the front-end world and struggling with API testing, you're about to discover your new best friend: Mock Service Worker (MSW). Trust me, this library is a game-changer for TypeScript projects!
 10: 
 11: ## What's the Deal with API Mocking?
 12: 
 13: When building front-end applications, we're constantly hitting APIs — but what happens when those APIs aren't ready? Or when you need to test error states? That's where mocking comes in!
 14: 
 15: Mock Service Worker stands out from traditional mocking solutions by intercepting actual network requests right at the browser or Node.js level. No more complicated setup or maintaining separate mock servers!
 16: 
 17: ## Why MSW Will Make Your Life Easier
 18: 
 19: Here's why you should be excited about MSW:
 20: 
 21: - Works seamlessly in any environment — browser, Node.js, or testing frameworks
 22: - Intercepts actual network requests giving you realistic testing scenarios
 23: - Plays perfectly with TypeScript
 24: - Reuse the same mocks everywhere
 25: 
 26: ## Getting Started with MSW
 27: 
 28: Let's set up MSW in your project with these simple steps:
 29: 
 30: ### 1. Install the package
 31: 
 32: ```bash
 33: npm install msw --save-dev
 34: ```
 35: 
 36: ### 2. Create your mock handlers
 37: 
 38: First, make a directory for your mocks:
 39: 
 40: ```bash
 41: mkdir src/mocks
 42: touch src/mocks/handlers.ts
 43: ```
 44: 
 45: Then define your API mocks in the handlers file:
 46: 
 47: ```typescript
 48: import { rest } from 'msw';
 49: 
 50: export const handlers = [
 51:   rest.get('/api/user', (req, res, ctx) => {
 52:     return res(
 53:       ctx.status(200),
 54:       ctx.json({
 55:         id: 1,
 56:         username: 'john_doe',
 57:         email: 'john@example.com',
 58:       })
 59:     );
 60:   }),
 61: ];
 62: ```
 63: 
 64: ### 3. Set up the service worker
 65: 
 66: Create a browser setup file:
 67: 
 68: ```typescript
 69: // src/mocks/browser.ts
 70: import { setupWorker } from 'msw';
 71: import { handlers } from './handlers';
 72: 
 73: export const worker = setupWorker(...handlers);
 74: ```
 75: 
 76: Then activate it in your app's entry point:
 77: 
 78: ```typescript
 79: // src/index.tsx
 80: if (process.env.NODE_ENV === 'development') {
 81:   const { worker } = require('./mocks/browser');
 82:   worker.start();
 83: }
 84: ```
 85: 
 86: ### 4. For testing environments
 87: 
 88: ```typescript
 89: // src/mocks/server.ts
 90: import { setupServer } from 'msw/node';
 91: import { handlers } from './handlers';
 92: 
 93: export const server = setupServer(...handlers);
 94: ```
 95: 
 96: In your test setup:
 97: 
 98: ```typescript
 99: // setupTests.ts
100: import { server } from './mocks/server';
101: 
102: beforeAll(() => server.listen());
103: afterEach(() => server.resetHandlers());
104: afterAll(() => server.close());
105: ```
106: 
107: ## Level Up Your Mocking Game with TypeScript
108: 
109: One of the coolest things about MSW is how it leverages TypeScript's power:
110: 
111: ```typescript
112: import { rest } from 'msw';
113: import { User } from './types'; // Your User interface
114: 
115: export const handlers = [
116:   rest.get<{}, {}, User>('/api/user', (req, res, ctx) => {
117:     return res(
118:       ctx.json({
119:         id: 2,
120:         username: 'jane_doe',
121:         email: 'jane@example.com',
122:       })
123:     );
124:   }),
125: ];
126: ```
127: 
128: ## Pro Tips for MSW Success
129: 
130: Here are some tips I've learned from using MSW in production:
131: 
132: - Mock different response states — Success, errors, loading states
133: - Keep related endpoints together for better maintainability
134: - Combine MSW with Storybook to create component stories with realistic data flows
135: - Empty arrays, weird data formats, network timeouts — simulate it all!
136: - The more realistic your mocks, the more valuable your tests
137: 
138: Example of error state mocking:
139: 
140: ```typescript
141: rest.get('/api/users', (req, res, ctx) => {
142:   return res(ctx.status(500), ctx.json({ message: 'Internal server error' }));
143: });
144: ```
145: 
146: ## MSW vs. Traditional Mocking: Why MSW Wins
147: 
148: I've tried many mocking solutions, and MSW stands out because it:
149: 
150: - Provides realistic network behavior
151: - Works in both development and testing
152: - Requires minimal setup
153: - Supports TypeScript out of the box
154: 
155: No more flaky API calls!
156: 
157: ## Conclusion
158: 
159: Implementing MSW in your TypeScript projects will change how you approach development and testing. You'll build more robust applications, catch bugs earlier, and spend less time wrestling with backend dependencies.
160: 
161: Start small — mock just one endpoint and see the difference it makes in your workflow. Then gradually expand your mocks as you get comfortable with the approach.
162: 
163: Happy coding! 🚀
</file>

<file path="src/data/blog/mocking-local-storage-vitest.mdx">
  1: ---
  2: title: 'How to mock and spy on local storage in vitest'
  3: author: 'Dylan Brtiz'
  4: date: 2025-04-18
  5: tags: ['spying', 'testing', 'mocking', 'vitest', 'web-development']
  6: description: 'Learn effective techniques to mock and spy on localStorage in Vitest, ensuring reliable and isolated tests for your web applications.'
  7: ---
  8: 
  9: Today we're diving into a super practical topic that'll level up your testing game: how to properly test code that interacts with localStorage using Vitest.
 10: 
 11: If you've ever been frustrated trying to test components that use browser storage, this guide is for you.
 12: 
 13: ## Why Should You Even Care About Mocking localStorage?
 14: 
 15: Let's start with the basics. When you're testing code that uses localStorage, you don't want your tests to:
 16: 
 17: - Mess with your actual browser storage (yikes!)
 18: - Depend on whatever random data might be in localStorage
 19: - Break when running in environments without localStorage (like CI pipelines)
 20: 
 21: That's where mocking and spying come in! They let you create a fake version of localStorage that you can control completely. Pretty cool, right?
 22: 
 23: ## Setting Up Your Test Environment
 24: 
 25: First things first, you need a browser-like environment in your Vitest setup. Here's how to do that:
 26: 
 27: ```js
 28: // vite.config.js
 29: import { defineConfig } from 'vite';
 30: 
 31: export default defineConfig({
 32:   test: {
 33:     environment: 'jsdom', // You could also use 'happy-dom'
 34:   },
 35: });
 36: ```
 37: 
 38: This gives you access to the window object and its localStorage property in your tests.
 39: 
 40: ## Option 1: Manual Mocking (DIY Style)
 41: 
 42: You can create your own localStorage mock from scratch. It looks similar and does the job for testing:
 43: 
 44: ```js
 45: let originalLocalStorage;
 46: 
 47: beforeAll(() => {
 48:   originalLocalStorage = window.localStorage;
 49:   window.localStorage = {
 50:     store: {},
 51:     getItem(key) {
 52:       return this.store[key] ?? null;
 53:     },
 54:     setItem(key, value) {
 55:       this.store[key] = value;
 56:     },
 57:     removeItem(key) {
 58:       delete this.store[key];
 59:     },
 60:     clear() {
 61:       this.store = {};
 62:     },
 63:   };
 64: });
 65: 
 66: afterAll(() => {
 67:   window.localStorage = originalLocalStorage;
 68: });
 69: ```
 70: 
 71: This approach gives you total control, but requires more setup code than some alternatives.
 72: 
 73: ## Option 2: Use a Package (The Easy Button)
 74: 
 75: Why reinvent the wheel? There's a package called `vitest-localstorage-mock` that does all the heavy lifting for you:
 76: 
 77: ```bash
 78: npm install -D vitest-localstorage-mock
 79: ```
 80: 
 81: Then just tell Vitest to use it:
 82: 
 83: ```js
 84: // vite.config.js
 85: import { defineConfig } from 'vite';
 86: 
 87: export default defineConfig({
 88:   test: {
 89:     setupFiles: ['vitest-localstorage-mock'],
 90:   },
 91: });
 92: ```
 93: 
 94: Boom! Now you've got a fully mocked localStorage and sessionStorage with zero effort. This is perfect if you just want things to work without fussing over implementation details.
 95: 
 96: ## Spying on localStorage Methods
 97: 
 98: Now for the really fun part - spying on localStorage to see what your code is doing behind the scenes!
 99: 
100: ```js
101: import { vi } from 'vitest';
102: 
103: // Setup the spies
104: const getItemSpy = vi.spyOn(Storage.prototype, 'getItem');
105: const setItemSpy = vi.spyOn(Storage.prototype, 'setItem');
106: 
107: // Clean up after each test
108: afterEach(() => {
109:   getItemSpy.mockClear();
110:   setItemSpy.mockClear();
111:   localStorage.clear();
112: });
113: ```
114: 
115: This lets you verify exactly how your code interacts with localStorage:
116: 
117: ```js
118: test('should save user preferences', () => {
119:   // Run your code that should use localStorage
120:   saveUserPreferences({ theme: 'dark' });
121: 
122:   // Check if localStorage was called correctly
123:   expect(setItemSpy).toHaveBeenCalledWith(
124:     'userPrefs',
125:     JSON.stringify({ theme: 'dark' })
126:   );
127: });
128: ```
129: 
130: ## Controlling What localStorage Returns
131: 
132: Sometimes you need to test how your code handles different localStorage scenarios. You can make localStorage return whatever you want:
133: 
134: ```js
135: // Make localStorage.getItem always return this value for any key
136: getItemSpy.mockReturnValue('fake-user-data');
137: 
138: // Or get more specific with different return values for sequential calls
139: getItemSpy
140:   .mockReturnValueOnce('first call')
141:   .mockReturnValueOnce('second call')
142:   .mockReturnValue('all other calls');
143: ```
144: 
145: ## Real-World Example: Testing a Dark Mode Toggle
146: 
147: Let's put it all together with a practical example - testing a component that saves theme preferences:
148: 
149: ```js
150: import { describe, it, expect, beforeEach, vi, afterEach } from 'vitest';
151: import { render, fireEvent } from '@testing-library/react';
152: import ThemeToggle from './ThemeToggle';
153: 
154: describe('ThemeToggle component', () => {
155:   // Set up our spies
156:   const getItemSpy = vi.spyOn(Storage.prototype, 'getItem');
157:   const setItemSpy = vi.spyOn(Storage.prototype, 'setItem');
158: 
159:   beforeEach(() => {
160:     // Start each test with a clean slate
161:     localStorage.clear();
162:     getItemSpy.mockClear();
163:     setItemSpy.mockClear();
164:   });
165: 
166:   it('loads saved theme from localStorage on mount', () => {
167:     // Pretend we have a saved theme
168:     getItemSpy.mockReturnValue('dark');
169: 
170:     const { getByTestId } = render(<ThemeToggle />);
171: 
172:     // Verify localStorage was checked
173:     expect(getItemSpy).toHaveBeenCalledWith('theme');
174: 
175:     // Verify the UI shows dark mode is active
176:     expect(getByTestId('theme-toggle')).toHaveTextContent(
177:       'Switch to Light Mode'
178:     );
179:   });
180: 
181:   it('saves theme to localStorage when toggled', () => {
182:     const { getByTestId } = render(<ThemeToggle />);
183: 
184:     // Click the toggle button
185:     fireEvent.click(getByTestId('theme-toggle'));
186: 
187:     // Verify localStorage was updated
188:     expect(setItemSpy).toHaveBeenCalledWith('theme', 'dark');
189:   });
190: });
191: ```
192: 
193: ## Pro Tips for Better Tests
194: 
195: 1. **Always clean up after each test** using `afterEach`. This prevents test bleeding where one test affects another.
196: 
197: 2. **Reset your spies before or after each test** with `mockClear()` to start fresh.
198: 
199: 3. **Be specific in your assertions** - don't just check if a method was called, check it was called with the right arguments.
200: 
201: 4. **When possible, assert both the method calls AND the actual effects** of those calls (like checking DOM updates).
202: 
203: ## Choosing the Right Approach
204: 
205: Here's a quick decision guide:
206: 
207: - **Need something quick and reliable?** Use the `vitest-localstorage-mock` package.
208: - **Want more control or have unusual requirements?** Create a manual mock.
209: - **Need to verify how your code uses localStorage?** Add spies with `vi.spyOn`.
210: - **Testing edge cases?** Control return values with `mockReturnValue` or `mockReturnValueOnce`.
211: 
212: ## Wrapping Up
213: 
214: Testing localStorage doesn't have to be a headache! With these techniques, you can write tests that are:
215: 
216: - Isolated from the real browser environment
217: - Predictable and consistent
218: - Able to verify exactly how your code interacts with storage
219: 
220: So go forth and test that localStorage code like a pro! 💪
221: 
222: Sources:
223: 
224: - https://gist.github.com/mustafadalga/fbb9e1bab21b290131d4f721e291d51a,
225: - https://www.npmjs.com/package/vitest-localstorage-mock,
226: - https://runthatline.com/vitest-mock-localstorage/,
227: - https://vitest.dev/guide/mocking.html,
228: - https://stevekinney.net/courses/testing/mock-spy-secret-input-example,
229: - https://blog.dylanbritz.dev/posts/mocking-and-spying-on-local-storage-in-vitest,
230: - https://codesandbox.io/examples/package/vitest-localstorage-mock,
231: - https://vitest.dev/guide/mocking,
232: - https://stevekinney.net/courses/testing/testing-local-storage,
233: - https://blog.logrocket.com/advanced-guide-vitest-testing-mocking/
</file>

<file path="src/data/blog/scheduled-cron-jobs-github.mdx">
  1: ---
  2: title: 'How to Run Scheduled Cron Jobs in GitHub Workflows for Free'
  3: author: 'Dylan Brtiz'
  4: date: 2025-04-20
  5: tags: ['github', 'workflows', 'devops', 'web-development']
  6: description: 'Discover how to effectively automate tasks using scheduled cron jobs in GitHub Actions for free, streamlining your workflow and improving efficiency.'
  7: ---
  8: 
  9: Ever wanted to automate repetitive tasks without paying for a dedicated server? GitHub Actions offers a powerful (and free!) solution for running scheduled tasks also known as cron jobs. Whether you need to sync data, generate reports, or even run a web scraper on schedule, this guide has you covered!
 10: 
 11: ## What Are GitHub Actions Scheduled Workflows?
 12: 
 13: GitHub Actions lets you automate tasks based on various triggers, including time-based schedules using cron syntax. The best part? It's completely free for public repositories, with generous free minute allocations for private repos too.
 14: 
 15: ## Setting Up Your First Scheduled Workflow
 16: 
 17: ### 1. Create or Choose Your Repository
 18: 
 19: Remember that public repositories have unlimited free minutes, while private repos get around 2000 minutes/month on free plans.
 20: 
 21: ### 2. Add a Workflow File
 22: 
 23: Create a new file at `.github/workflows/cron-job.yml` in your repository.
 24: 
 25: ### 3. Define Your Schedule Using Cron Syntax
 26: 
 27: Here's a simple example that runs every day at midnight (UTC):
 28: 
 29: ```yaml
 30: name: Daily Cron Job
 31: 
 32: on:
 33:   schedule:
 34:     - cron: '0 0 * * *' # Every day at midnight UTC
 35: 
 36: jobs:
 37:   run-script:
 38:     runs-on: ubuntu-latest
 39:     steps:
 40:       - name: Checkout code
 41:         uses: actions/checkout@v4
 42:       - name: Run script
 43:         run: echo "Scheduled job ran at $(date -u)"
 44: ```
 45: 
 46: ### 4. Understanding Cron Syntax
 47: 
 48: Cron expressions use five fields representing:
 49: 
 50: - Minute (0-59)
 51: - Hour (0-23)
 52: - Day of Month (1-31)
 53: - Month (1-12)
 54: - Day of Week (0-6, where Sunday = 0)
 55: 
 56: Here are some common patterns:
 57: 
 58: | Cron Expression | What It Does                |
 59: | --------------- | --------------------------- |
 60: | `0 0 * * *`     | Every day at midnight UTC   |
 61: | `*/5 * * * *`   | Every five minutes          |
 62: | `0 13 * * 1`    | Every Monday at 1:00 PM UTC |
 63: 
 64: Pro tip: Use [crontab.guru](https://crontab.guru) to test your cron expressions!
 65: 
 66: ## Best Practices for GitHub Actions Cron Jobs
 67: 
 68: ### Mind the Time Zone
 69: 
 70: All GitHub Actions schedules run in UTC. Make sure to adjust your schedule accordingly if you need tasks to run at specific local times.
 71: 
 72: ### Schedule Strategically
 73: 
 74: - The minimum interval allowed is every 5 minutes (`*/5 * * * *`)
 75: - Avoid scheduling exactly on the hour (`0 * * * *`) to prevent delays due to high demand
 76: - You can set multiple schedules in one workflow to create complex timing patterns
 77: 
 78: ### Choose the Right Environment
 79: 
 80: By default, jobs run on Ubuntu, but you can specify `runs-on: windows-latest` or `macos-latest` if your tasks need a specific operating system.
 81: 
 82: ## Real-World Example: Scheduled Web Scraper
 83: 
 84: Want to collect data from a website daily? Here's how to set up a Python web scraper to run every morning:
 85: 
 86: ```yaml
 87: name: Scheduled Web Scraper
 88: 
 89: on:
 90:   schedule:
 91:     - cron: '0 6 * * *' # Every day at 6am UTC
 92: 
 93: jobs:
 94:   scrape:
 95:     runs-on: ubuntu-latest
 96:     steps:
 97:       - uses: actions/checkout@v4
 98:       - name: Set up Python
 99:         uses: actions/setup-python@v5
100:         with:
101:           python-version: '3.x'
102:       - name: Install dependencies
103:         run: pip install -r requirements.txt
104:       - name: Run scraper
105:         run: python scraper.py
106: ```
107: 
108: This will run your scraper automatically at 6 AM UTC every day.
109: 
110: ## Why Choose GitHub Actions Over Alternatives?
111: 
112: | Feature     | GitHub Actions            | Traditional Cron          | Cloud Schedulers             |
113: | ----------- | ------------------------- | ------------------------- | ---------------------------- |
114: | Setup       | Simple YAML in repo       | Requires server access    | Cloud configuration          |
115: | Cost        | Free for public repos     | Free (but needs a server) | Usually requires payment     |
116: | Maintenance | Managed by GitHub         | Your responsibility       | Minimal but requires account |
117: | Best for    | Code projects, automation | Local tasks               | Production systems           |
118: 
119: ## Tips
120: 
121: 1. **Test your workflows** manually before scheduling them to catch any issues
122: 2. **Use GitHub Secrets** for storing API keys or sensitive information
123: 3. **Add conditions** to make your workflows smarter using the `if:` syntax
124: 4. **Monitor your usage** if you're using private repositories to avoid exceeding free minutes
125: 
126: GitHub Actions scheduled workflows give you a free, flexible way to automate recurring tasks without managing servers or paying for third-party schedulers. Whether you're running maintenance scripts, syncing data, or creating automated reports, these cloud-based cron jobs integrate seamlessly with your existing GitHub workflow.
127: 
128: ## Have you set up any cool automated workflows with GitHub Actions? What tasks are you planning to automate?
129: 
130: ---
131: 
132: Source:
133: 
134: - https://theanshuman.dev/articles/free-cron-jobs-with-github-actions-31d6
135: - https://docs.github.com/actions/learn-github-actions/events-that-trigger-workflows
136: - https://jasonet.co/posts/scheduled-actions/
137: - https://www.tinybird.co/docs/get-data-in/data-operations/scheduling-with-github-actions-and-cron
138: - https://earthly.dev/blog/cronjobs-for-github-actions/,https://www.youtube.com/watch?v=kh7piyS2XeE
139: - https://dev.to/anshuman_bhardwaj/free-cron-jobs-with-github-actions-31d6
140: - https://github.com/remarkablemark/github-actions-workflows/blob/master/.github/workflows/cron.yml
141: - https://www.firecrawl.dev/blog/automated-web-scraping-free-2025,https://docs.github.com/articles/getting-started-with-github-actions
</file>

<file path="src/data/blog/testing-vue-composables-lifecycle.mdx">
  1: ---
  2: title: 'Mastering Vue 3 Composables Testing with Vitest'
  3: author: 'Dylan Brtiz'
  4: date: 2025-04-19
  5: tags: ['spying', 'testing', 'vue3', 'vitest', 'web-development']
  6: description: 'Learn to effectively test Vue 3 composables with lifecycle hooks using Vitest. Discover best practices and patterns to simplify your testing process.'
  7: ---
  8: 
  9: So you've built some awesome Vue 3 composables that use lifecycle hooks, and now you're scratching your head about how to test them? Don't worry—I've been there too! Testing composables that rely on Vue's lifecycle hooks isn't as straightforward as testing regular JavaScript functions, but with the right approach, it's totally doable.
 10: 
 11: Let's dive into how to properly test these special composables with Vitest!
 12: 
 13: ## Why Testing Lifecycle Hooks Is Tricky
 14: 
 15: If you've tried something like this:
 16: 
 17: ```js
 18: import { useMyComposable } from './useMyComposable';
 19: 
 20: test('my composable works', () => {
 21:   const result = useMyComposable();
 22:   // Why aren't my onMounted effects running?! 😱
 23: });
 24: ```
 25: 
 26: ...you probably noticed that your lifecycle hooks never fired. That's because hooks like `onMounted` and `onUnmounted` need a Vue component context to work properly.
 27: 
 28: ## The Solution: The withSetup Pattern
 29: 
 30: The key to testing lifecycle-dependent composables is creating a temporary Vue component that can properly trigger those lifecycle events. Here's how to set it up:
 31: 
 32: ```js
 33: // test-utils.js
 34: import { createApp } from 'vue';
 35: 
 36: export function withSetup(composable) {
 37:   let result;
 38: 
 39:   // Create a mini Vue app that uses our composable
 40:   const app = createApp({
 41:     setup() {
 42:       result = composable();
 43:       return () => {};
 44:     },
 45:   });
 46: 
 47:   // Mount it to trigger lifecycle hooks
 48:   app.mount(document.createElement('div'));
 49: 
 50:   // Return both results and app (for cleanup)
 51:   return [result, app];
 52: }
 53: ```
 54: 
 55: This helper function:
 56: 
 57: 1. Creates a tiny Vue app
 58: 2. Executes your composable in its setup function
 59: 3. Mounts the app (triggering onMounted hooks)
 60: 4. Returns both your composable's return values and the app instance (so you can unmount it later)
 61: 
 62: ## Let's Write Some Tests!
 63: 
 64: Here's how to use this pattern with Vitest:
 65: 
 66: ```js
 67: import { withSetup } from './test-utils';
 68: import { useMyComposable } from './useMyComposable';
 69: import { describe, it, expect } from 'vitest';
 70: 
 71: describe('useMyComposable', () => {
 72:   it('initializes data on mount', () => {
 73:     // The magic happens here!
 74:     const [result, app] = withSetup(() => useMyComposable());
 75: 
 76:     // Test mounted state
 77:     expect(result.isReady.value).toBe(true);
 78: 
 79:     // Always clean up by unmounting (this triggers onUnmounted hooks)
 80:     app.unmount();
 81:   });
 82: 
 83:   it('cleans up resources when unmounted', () => {
 84:     const [result, app] = withSetup(() => useMyComposable());
 85: 
 86:     // Unmount to trigger the onUnmounted lifecycle hook
 87:     app.unmount();
 88: 
 89:     // Test that cleanup happened correctly
 90:     expect(result.cleanupRan.value).toBe(true);
 91:   });
 92: });
 93: ```
 94: 
 95: ## Real-World Example: Testing a Window Resize Composable
 96: 
 97: Let's look at a practical example. Imagine you have a composable that tracks window width and cleans up event listeners properly:
 98: 
 99: ```js
100: // useWindowWidth.js
101: import { ref, onMounted, onUnmounted } from 'vue';
102: 
103: export function useWindowWidth() {
104:   const width = ref(window.innerWidth);
105: 
106:   function updateWidth() {
107:     width.value = window.innerWidth;
108:   }
109: 
110:   onMounted(() => window.addEventListener('resize', updateWidth));
111:   onUnmounted(() => window.removeEventListener('resize', updateWidth));
112: 
113:   return { width };
114: }
115: ```
116: 
117: Here's how to test it:
118: 
119: ```js
120: import { withSetup } from './test-utils';
121: import { useWindowWidth } from './useWindowWidth';
122: import { describe, it, expect } from 'vitest';
123: 
124: describe('useWindowWidth', () => {
125:   it('tracks window width when resized', () => {
126:     const [result, app] = withSetup(() => useWindowWidth());
127: 
128:     // Simulate resize event
129:     window.innerWidth = 800;
130:     window.dispatchEvent(new Event('resize'));
131: 
132:     expect(result.width.value).toBe(800);
133: 
134:     // Clean up
135:     app.unmount();
136:   });
137: });
138: ```
139: 
140: ## Advanced Testing Scenarios
141: 
142: ### Testing with provide/inject
143: 
144: If your composable uses Vue's dependency injection, you can extend the withSetup helper:
145: 
146: ```js
147: export function withSetupAndProvide(composable, provides = {}) {
148:   let result;
149:   const app = createApp({
150:     setup() {
151:       // Set up provided values
152:       Object.entries(provides).forEach(([key, value]) => {
153:         provide(key, value);
154:       });
155: 
156:       result = composable();
157:       return () => {};
158:     },
159:   });
160: 
161:   app.mount(document.createElement('div'));
162:   return [result, app];
163: }
164: ```
165: 
166: ### Testing async operations
167: 
168: For composables with async operations in lifecycle hooks:
169: 
170: ```js
171: it('loads data asynchronously on mount', async () => {
172:   const [result, app] = withSetup(() => useAsyncData());
173: 
174:   // Wait for async operations to complete
175:   await flushPromises();
176: 
177:   expect(result.data.value).toEqual({ name: 'Test Data' });
178:   app.unmount();
179: });
180: ```
181: 
182: ## Best Practices
183: 
184: 1. **Always clean up**: Call `app.unmount()` in your tests to trigger onUnmounted hooks
185: 2. **Test the public API**: Focus on testing what the composable returns, not internal details
186: 3. **Test side-effect cleanup**: Especially important for composables that add event listeners
187: 4. **Keep tests focused**: Each test should verify one specific behavior
188: 
189: ## When to Use Different Testing Approaches
190: 
191: | Composable Type      | Testing Approach                      |
192: | -------------------- | ------------------------------------- |
193: | Pure reactivity only | Direct invocation (no helper needed)  |
194: | Uses lifecycle hooks | Use withSetup pattern                 |
195: | Uses provide/inject  | Use withSetupAndProvide pattern       |
196: | Has async operations | Use withSetup + await flushPromises() |
197: 
198: ## Now go forth and test those composables with confidence! Your future self (and teammates) will thank you.
199: 
200: ---
201: 
202: Sources:
203: 
204: - https://vuejs.org/guide/scaling-up/testing,https://alexop.dev/posts/how-to-test-vue-composables/,
205: - https://dev.to/jacobandrewsky/good-practices-and-design-patterns-for-vue-composables-24lk,
206: - https://test-utils.vuejs.org/guide/advanced/reusability-composition,
207: - https://mayashavin.com/articles/testing-components-with-vitest,
208: - https://dev.to/jacobandrewsky/testing-vue-components-with-vitest-5c21,
209: - https://www.brightsec.com/blog/vue-unit-testing/,
210: - https://blog.logrocket.com/guide-vitest-automated-testing-vue-components/,
211: - https://vuejs.org/guide/reusability/composables,
212: - https://sciendo.com/2/download/xRsimZKFNLxetshcHqfSjR_JAfScjX1ssTKLM0XFUk.pdf
</file>

<file path="src/data/projects/blak_ui.json">
1: {
2:   "title": "Blak/ui",
3:   "description": "Primitive component library for Framer",
4:   "link": "https://blakui.framer.website/docs/introduction"
5: }
</file>

<file path="src/data/projects/blog.json">
1: {
2:   "title": "Work Notes",
3:   "description": "Ton of modern web development tutorials, tips and tricks",
4:   "link": "/writing"
5: }
</file>

<file path="src/data/projects/whispr.json">
1: {
2:   "title": "Whispr",
3:   "description": "Whispr secure text sharing, privacy & compliance.",
4:   "link": "https://whispr.dylanbritz.dev"
5: }
</file>

<file path="src/data/work/1.abn.json">
1: {
2:   "title": "Senior Frontend Developer",
3:   "company": "ABN AMRO Bank N.V.",
4:   "date": "Jun 2024 - Present"
5: }
</file>

<file path="src/data/work/2.share_value.json">
1: {
2:   "title": "Frontend Developer",
3:   "company": "ShareValue B.V.",
4:   "date": "Apr 2023 - Mar 2024"
5: }
</file>

<file path="src/data/work/3.firstview.json">
1: {
2:   "title": "Web Developer",
3:   "company": "FirstView - Digital Experience Agency",
4:   "date": "Jan 2021 - Mar 2023"
5: }
</file>

<file path="src/data/work/4.sportpro.json">
1: {
2:   "title": "UI Designer & Web Developer",
3:   "company": "Sportpro South Africa",
4:   "date": "Aug 2017 - Jan 2021"
5: }
</file>

<file path="src/data/work/5.d2d.json">
1: {
2:   "title": "Web Designer",
3:   "company": "D2D Digital Marketing",
4:   "date": "Apr 2015 - Jun 2017"
5: }
</file>

<file path="src/layouts/Layout.astro">
  1: ---
  2: interface Props {
  3:   title?: string;
  4:   description?: string;
  5:   keywords?: string[];
  6:   icon?: string;
  7:   themeColor?: string;
  8:   colorScheme?: string;
  9:   robots?: string;
 10: }
 11: const props = Astro.props;
 12: import Head from '../components/Head.astro';
 13: import '../styles/global.css';
 14: 
 15: const links = [
 16:   {
 17:     title: 'X Profile',
 18:     link: 'https://x.com/britzdm',
 19:     type: 'x',
 20:   },
 21:   {
 22:     title: 'LinkedIn Profile',
 23:     link: 'https://www.linkedin.com/in/britzdm/',
 24:     type: 'linkedin',
 25:   },
 26: ];
 27: ---
 28: 
 29: <!doctype html>
 30: <html lang='en'>
 31:   <Head {...props} />
 32: 
 33:   <body
 34:     class='overflow-visible min-h-screen bg-neutral-50 text-neutral-900 dark:bg-neutral-900 dark:text-neutral-100 flex flex-col'>
 35:     <header
 36:       class='z-10 w-full text-lg font-medium py-4 px-4 md:px-0 border-b border-neutral-200'>
 37:       <div class='container mx-auto flex justify-between items-center'>
 38:         <a href='/' class='font-bold text-sm'>Dylan Britz</a>
 39:         <div class='flex gap-2 items-center'>
 40:           {
 41:             links.map((link) => (
 42:               <a target='_blank' href={link.link} title={link.title}>
 43:                 {link.type === 'x' ? (
 44:                   <svg
 45:                     xmlns='http://www.w3.org/2000/svg'
 46:                     shape-rendering='geometricPrecision'
 47:                     text-rendering='geometricPrecision'
 48:                     image-rendering='optimizeQuality'
 49:                     fill-rule='evenodd'
 50:                     clip-rule='evenodd'
 51:                     class='size-4'
 52:                     viewBox='0 0 512 509.64'>
 53:                     <>
 54:                       <rect
 55:                         width='512'
 56:                         height='509.64'
 57:                         rx='115.61'
 58:                         ry='115.61'
 59:                       />
 60:                       <path
 61:                         fill='#fff'
 62:                         fill-rule='nonzero'
 63:                         d='M323.74 148.35h36.12l-78.91 90.2 92.83 122.73h-72.69l-56.93-74.43-65.15 74.43h-36.14l84.4-96.47-89.05-116.46h74.53l51.46 68.04 59.53-68.04zm-12.68 191.31h20.02l-129.2-170.82H180.4l130.66 170.82z'
 64:                       />
 65:                     </>
 66:                   </svg>
 67:                 ) : null}
 68: 
 69:                 {link.type === 'linkedin' ? (
 70:                   <svg
 71:                     xmlns='http://www.w3.org/2000/svg'
 72:                     shape-rendering='geometricPrecision'
 73:                     text-rendering='geometricPrecision'
 74:                     image-rendering='optimizeQuality'
 75:                     fill-rule='evenodd'
 76:                     clip-rule='evenodd'
 77:                     class='size-4'
 78:                     viewBox='0 0 512 509.64'>
 79:                     <>
 80:                       <rect
 81:                         width='512'
 82:                         height='509.64'
 83:                         rx='115.61'
 84:                         ry='115.61'
 85:                       />
 86:                       <path
 87:                         fill='#fff'
 88:                         d='M204.97 197.54h64.69v33.16h.94c9.01-16.16 31.04-33.16 63.89-33.16 68.31 0 80.94 42.51 80.94 97.81v116.92h-67.46l-.01-104.13c0-23.81-.49-54.45-35.08-54.45-35.12 0-40.51 25.91-40.51 52.72v105.86h-67.4V197.54zm-38.23-65.09c0 19.36-15.72 35.08-35.08 35.08-19.37 0-35.09-15.72-35.09-35.08 0-19.37 15.72-35.08 35.09-35.08 19.36 0 35.08 15.71 35.08 35.08zm-70.17 65.09h70.17v214.73H96.57V197.54z'
 89:                       />
 90:                     </>
 91:                   </svg>
 92:                 ) : null}
 93:               </a>
 94:             ))
 95:           }
 96:         </div>
 97:       </div>
 98:     </header>
 99:     <slot />
100:     <footer class='flex items-center justify-center py-4 gap-1'>
101:       © Copyright {new Date().getFullYear()}
102:       <a class='hover:underline' title='Go To Home Page' href='/'>Dylan Britz</a
103:       >
104:     </footer>
105:   </body>
106: </html>
</file>

<file path="src/pages/index.astro">
 1: ---
 2: import { getCollection } from 'astro:content';
 3: import Layout from '../layouts/Layout.astro';
 4: import SectionHeader from '../components/ui/section-header.vue';
 5: import ExperienceCard from '../components/ui/experience-card.vue';
 6: import SkillsCard from '../components/ui/skills-card.vue';
 7: import ProjectCard from '../components/ui/project-card.vue';
 8: import PageSection from '../components/PageSection.astro';
 9: const work = await getCollection('work');
10: const projects = await getCollection('projects');
11: const skills = [
12:   'Full Stack Web Development',
13:   'UX Design',
14:   'Framer Development',
15:   'Product Development',
16: ];
17: // Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
18: // Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
19: ---
20: 
21: <Layout>
22:   <main class='flex flex-col'>
23:     <PageSection title='About Me'>
24:       <p class='text-xl'>
25:         Seasoned full stack developer with over 8 years of expertise crafting
26:         sophisticated web applications and bringing innovative tech products
27:         from concept to deployment. - My background in both tech and fitness
28:         helps me create solutions for people like me, busy professionals who
29:         want efficient tools that actually work.
30:       </p>
31:       <picture>
32:         <source srcset='/opt/images/dylan.webp' type='image/webp' />
33:         <source srcset='/opt/images/dylan.jpeg' type='image/jpeg' />
34:         <img
35:           class='rounded-md w-52'
36:           src='/opt/images/dylan.jpeg'
37:           alt='Photo of Dylan Britz'
38:         />
39:       </picture>
40:     </PageSection>
41:     <hr class='border-neutral-200' />
42:     <PageSection title='Projects'>
43:       {
44:         projects.map((post, index) => (
45:           <ProjectCard
46:             client:load
47:             title={post.data.title}
48:             description={post.data.description}
49:             link={post.data.link}
50:             offset={index + 1}
51:           />
52:         ))
53:       }
54:     </PageSection>
55:     <hr class='border-neutral-200' />
56:     <PageSection title='Experience'>
57:       <ul class='flex flex-col gap-8'>
58:         {
59:           work.map((item, index) => (
60:             <ExperienceCard
61:               client:load
62:               title={item.data.title}
63:               company={item.data.company}
64:               date={item.data.date}
65:               delay={index}
66:             />
67:           ))
68:         }
69:       </ul>
70:     </PageSection>
71:     <hr class='border-neutral-200' />
72:     <PageSection title='Skills'>
73:       <ul class='flex flex-col gap-8'>
74:         {
75:           skills.map((item, index) => (
76:             <SkillsCard client:load title={item} delay={index} />
77:           ))
78:         }
79:       </ul>
80:     </PageSection>
81:   </main>
82: </Layout>
</file>

<file path="src/pages/writing/[id].astro">
 1: ---
 2: import { getCollection, render } from 'astro:content';
 3: import Layout from '../../layouts/Layout.astro';
 4: import PostHeader from '../../components/post/post-header.astro';
 5: import BackButton from '../../components/ui/back-button.vue';
 6: import { sortByDate } from '../../utils/sortByDate.js';
 7: // 1. Generate a new path for every collection entry
 8: export async function getStaticPaths() {
 9:   const posts = await getCollection('blog');
10:   const numberOfPosts = posts.length; // Total of all posts
11:   return posts.sort(sortByDate).map((post, i) => ({
12:     params: { id: post.id },
13:     props: {
14:       post,
15:       // Previous post
16:       prevPost:
17:         i + 1 === numberOfPosts // If the current post is the oldest
18:           ? { frontmatter: '' }
19:           : posts[i + 1],
20:       // Next post
21:       nextPost:
22:         i === 0 // If the current post is the newest
23:           ? { frontmatter: '' }
24:           : posts[i - 1],
25:     },
26:   }));
27: }
28: // 2. For your template, you can get the entry directly from the prop
29: const { post, prevPost, nextPost } = Astro.props;
30: const { Content } = await render(post);
31: ---
32: 
33: <Layout title={post.data.title} description={post.data.description ?? ''}>
34:   <article class='bg-neutral-50 w-full flex flex-col'>
35:     <PostHeader
36:       title={post.data.title}
37:       date={post.data.date}
38:       description={post.data.description ?? ''}
39:       author={post.data.author}
40:       imageId={post.id}
41:     />
42:     <section
43:       class='bg-neutral-50 w-full z-10 pb-8 px-2 md:px-6 lg:py-20 rounded-t-4xl relative'>
44:       <nav class='max-w-4xl mx-auto pb-5'>
45:         <ul
46:           class='flex flex-wrap items-center gap-1 md:gap-4 text-sm font-semibold'>
47:           <li>
48:             <a href='/'>Home</a>
49:           </li>
50:           <svg
51:             xmlns='http://www.w3.org/2000/svg'
52:             fill='none'
53:             viewBox='0 0 24 24'
54:             stroke-width='1.5'
55:             stroke='currentColor'
56:             class='size-2'>
57:             <path
58:               stroke-linecap='round'
59:               stroke-linejoin='round'
60:               d='M17.25 8.25 21 12m0 0-3.75 3.75M21 12H3'></path>
61:           </svg>
62: 
63:           <li>
64:             <a href='/writing'>Writing</a>
65:           </li>
66:         </ul>
67:       </nav>
68:       <div
69:         class='mx-auto prose max-w-4xl prose-zinc prose-sm md:prose-lg prose-headings:font-medium'>
70:         <Content />
71:       </div>
72:       <nav
73:         class='max-w-4xl mx-auto py-5 mt-5 border-t border-neutral-300 flex justify-end grid-cols-2 gap-2 w-full'>
74:         <div class='w-full'>
75:           <BackButton post={prevPost} />
76:         </div>
77:         <div class='w-full'>
78:           <BackButton post={nextPost} rotate />
79:         </div>
80:       </nav>
81:     </section>
82:   </article>
83: </Layout>
</file>

<file path="src/pages/writing/index.astro">
 1: ---
 2: import Layout from '../../layouts/Layout.astro';
 3: import { getCollection } from 'astro:content';
 4: import BlogCard from '../../components/ui/blog-card.vue';
 5: import SectionHeader from '../../components/ui/section-header.vue';
 6: import { sortByDate } from '../../utils/sortByDate';
 7: import PageSection from '../../components/PageSection.astro';
 8: const posts = await getCollection('blog');
 9: ---
10: 
11: <Layout
12:   title='Web development posts | Dylan Britz'
13:   description='Modern, quick and digestible web development tutorials, tips, tricks and insights'>
14:   <main class='flex flex-col'>
15:     <PageSection title='Writing'>
16:       <ul class='text-lg md:text-xl font-medium flex flex-col gap-8'>
17:         {
18:           posts
19:             .sort(sortByDate)
20:             .map((post, index) => (
21:               <BlogCard
22:                 client:load
23:                 title={post.data.title}
24:                 author={post.data.author}
25:                 date={post.data.date}
26:                 url={`/writing/${post.id}`}
27:                 delay={index}
28:               />
29:             ))
30:         }
31:       </ul>
32:     </PageSection>
33:   </main>
34: </Layout>
</file>

<file path="src/styles/global.css">
 1: @import url('https://fonts.googleapis.com/css2?family=Inter:opsz,wght@14..32,100..900&display=swap');
 2: @import "tailwindcss";
 3: @plugin "@tailwindcss/typography";
 4: @theme {
 5:   --font-sans: "Inter", "system-ui", "sans-serif";
 6:   --text-xs: 0.875rem;
 7:   --text-sm: 1rem;
 8:   --text-bas': 1.25rem;
 9:   --text-lg: 1.5rem;
10:   --text-xl: 2rem;
11:   --text-2xl: 2.5rem;
12:   --text-3xl: 3.5rem;
13:   --text-4xl: 4.5rem;
14:   --spacing: 8px;
15:   --color-primary-50: var(--color-blue-50);
16:   --color-primary-100: var(--color-blue-100);
17:   --color-primary-200: var(--color-blue-200);
18:   --color-primary-300: var(--color-blue-300);
19:   --color-primary-400: var(--color-blue-400);
20:   --color-primary-500: var(--color-blue-500);
21:   --color-primary-600: var(--color-blue-600);
22:   --color-primary-700: var(--color-blue-700);
23:   --color-primary-800: var(--color-blue-800);
24:   --color-primary-900: var(--color-blue-900);
25:   --color-primary-950: var(--color-blue-950);
26:   --color-secondary-50: var(--color-emerald-50);
27:   --color-secondary-100: var(--color-emerald-100);
28:   --color-secondary-200: var(--color-emerald-200);
29:   --color-secondary-300: var(--color-emerald-300);
30:   --color-secondary-400: var(--color-emerald-400);
31:   --color-secondary-500: var(--color-emerald-500);
32:   --color-secondary-600: var(--color-emerald-600);
33:   --color-secondary-700: var(--color-emerald-700);
34:   --color-secondary-800: var(--color-emerald-800);
35:   --color-secondary-900: var(--color-emerald-900);
36:   --color-secondary-950: var(--color-emerald-950);
37:   --color-neutral-50: var(--color-zinc-50);
38:   --color-neutral-100: var(--color-zinc-100);
39:   --color-neutral-200: var(--color-zinc-200);
40:   --color-neutral-300: var(--color-zinc-300);
41:   --color-neutral-400: var(--color-zinc-400);
42:   --color-neutral-500: var(--color-zinc-500);
43:   --color-neutral-600: var(--color-zinc-600);
44:   --color-neutral-700: var(--color-zinc-700);
45:   --color-neutral-800: var(--color-zinc-800);
46:   --color-neutral-900: var(--color-zinc-900);
47:   --color-neutral-950: var(--color-zinc-950);
48: }
49: @layer base {
50: h1, .h1 {
51:   @apply text-2xl/snug md:text-3xl/snug lg:text-4xl/snug font-medium;
52: }
53: h2, .h2 {
54:   @apply text-xl/snug md:text-2xl/snug lg:text-3xl/snug font-medium;
55: }
56: h3, .h3 {
57:   @apply text-lg/snug md:text-xl/snug lg:text-2xl/snug font-medium ;
58: }
59: p, .p {
60:  @apply text-base/relaxed lg:text-lg/relaxed;
61: }
62: }
</file>

<file path="src/utils/sortByDate.js">
1: export const sortByDate = (a, b) => {
2:   return new Date(b.data.date) - new Date(a.data.date);
3: };
</file>

<file path="src/utils/webpConverter.js">
1: import imagemin from 'imagemin';
2: import imageminWebp from 'imagemin-webp';
3: await imagemin(['public/opt/images/*.{jpg,png,jpeg}'], {
4:   destination: 'public/opt/images',
5:   plugins: [imageminWebp({ quality: 80 })],
6: });
7: console.log('Images optimized');
</file>

<file path="tsconfig.json">
 1: {
 2:   "extends": "astro/tsconfigs/strict",
 3:   "include": [
 4:     ".astro/types.d.ts",
 5:     "**/*"
 6:   ],
 7:   "exclude": [
 8:     "dist"
 9:   ],
10:   "compilerOptions": {
11:     "strictNullChecks": true,
12:     "jsx": "preserve"
13:   }
14: }
</file>

</files>
